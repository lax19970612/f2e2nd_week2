{"version":3,"sources":["components/HeaderBar.tsx","components/Card.tsx","assets/utils/GameUtils.ts","pages/Game/components/CardGroup.tsx","pages/Game/components/OpenCells.tsx","pages/Game/components/Foundation.tsx","pages/Game/index.tsx","App.tsx","index.tsx"],"names":["HeaderBar","timer","toggleTimer","restart","passTime","Math","floor","toString","padStart","className","onClick","alert","type","Card","from","row","value","cardType","cardValue","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","GameUtils","list","Array","ROW_NUMBER","fill","i","CARD_LENGTH","getRandCardNum","data","openCellList","foundation","mainCardList","rowIndex","targetRow","moveCardLists","isMoveToFoundationValid","isMoveToOpenCellValid","isMoveToOtherRowValid","length","valueDiff","abs","FOUNDATION_LENGTH","OPEN_CELL_LENGTH","isUsed","random","CardGroup","cards","dropEvent","cancelDefault","e","preventDefault","stopPropagation","onDrop","parse","getData","moveCardFrom","moveCardPreRow","moveCardValue","prevData","copy","datafrom","GetListData","dataTarget","cardIndex","findIndex","moveCardList","slice","IsMoveValid","splice","onDragEnter","onDragOver","map","card","OpenCells","cardGroup","index","cardTypeList","Foundation","Game","useState","gameData","setGameData","initialGameData","setInitialGameData","setTimer","timerStatus","setTimerStatus","useEffect","randomCardList","GetRandomCardList","intervalId","setInterval","clearInterval","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65c9e794.chunk.js","sourcesContent":["import React from 'react';\nimport './HeaderBar.css';\n\nconst HeaderBar: React.FC<{\n  timer: number;\n  toggleTimer: Function;\n  restart: Function;\n}> = ({ timer, toggleTimer, restart }) => {\n  const passTime: string = `${Math.floor(timer / 60)\n    .toString()\n    .padStart(2, '0')}:${(timer % 60).toString().padStart(2, '0')}`;\n\n  return (\n    <div className=\"header-bar\">\n      <div className=\"logo\">\n        <span>FREE</span>\n        <span>CELL</span>\n      </div>\n      <div className=\"timer\">{passTime}</div>\n      <div className=\"game-handle\">\n        <ul className=\"game-handle-list\">\n          <li\n            className=\"game-handle-list-item handle-undo\"\n            onClick={() => alert('哈哈哈還想反悔阿')}\n          >\n            UNDO\n          </li>\n          <li\n            className=\"game-handle-list-item handle-pause\"\n            onClick={() => toggleTimer()}\n          >\n            PAUSE\n          </li>\n          <li\n            className=\"game-handle-list-item handle-restart\"\n            onClick={() => restart()}\n          >\n            RESTART\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderBar;\n","import React from 'react';\nimport './Card.css';\n\nconst type = ['spade', 'heart', 'diamond', 'club'];\n\nconst Card: React.FC<{ from: string; row: number; value: number }> = ({\n  from,\n  row,\n  value\n}) => {\n  const cardType = type[Math.floor(value / 13)];\n  const cardValue = (value % 13) + 1;\n\n  const onDragStart = (event: React.DragEvent<HTMLDivElement>) => {\n    event.dataTransfer!.setData(\n      'data',\n      JSON.stringify({\n        from,\n        row,\n        value\n      })\n    );\n  };\n\n  return (\n    <div\n      className={`card card-${cardType}-${cardValue}`}\n      draggable=\"true\"\n      onDragStart={onDragStart}\n    />\n  );\n};\n\nexport default Card;\n","import GameDataInterface from '../../interface/GameData';\n\nexport default class GameUtils {\n  public static ROW_NUMBER: number = 8;\n  public static CARD_LENGTH: number = 52;\n  public static FOUNDATION_LENGTH: number = 4;\n  public static OPEN_CELL_LENGTH: number = 4;\n  private static isUsed: boolean[] = new Array(GameUtils.CARD_LENGTH).fill(\n    false\n  );\n\n  private static getRandCardNum: Function = (): number => {\n    let value: number;\n    while (true) {\n      value = Math.floor(Math.random() * GameUtils.CARD_LENGTH); // 0 - 51\n      if (!GameUtils.isUsed[value]) {\n        GameUtils.isUsed[value] = true;\n        return value;\n      }\n    }\n  };\n\n  public static GetRandomCardList(): number[][] {\n    let list: number[][] = new Array(GameUtils.ROW_NUMBER).fill([]);\n    for (let i = 0; i < GameUtils.CARD_LENGTH; ++i) {\n      let row: number = i % GameUtils.ROW_NUMBER;\n      let cardValue: number = GameUtils.getRandCardNum();\n      list[row] = [...list[row], cardValue];\n    }\n\n    return list;\n  }\n\n  public static GetListData(data: GameDataInterface, type: string): number[][] {\n    switch (type) {\n      case 'opencell':\n        return data.openCellList;\n      case 'foundation':\n        return data.foundation;\n      case 'main':\n      default:\n        return data.mainCardList;\n    }\n  }\n\n  public static IsMoveValid(\n    type: string,\n    rowIndex: number,\n    targetRow: number[],\n    moveCardLists: number[]\n  ): boolean {\n    switch (type) {\n      case 'foundation':\n        return GameUtils.isMoveToFoundationValid(\n          rowIndex,\n          targetRow,\n          moveCardLists\n        );\n      case 'opencell':\n        return GameUtils.isMoveToOpenCellValid(targetRow, moveCardLists);\n      case 'main':\n      default:\n        return GameUtils.isMoveToOtherRowValid(targetRow, moveCardLists);\n    }\n  }\n\n  private static isMoveToOpenCellValid(\n    targetRow: number[],\n    moveCardLists: number[]\n  ): boolean {\n    return !targetRow.length && moveCardLists.length === 1;\n  }\n\n  private static isMoveToFoundationValid(\n    rowIndex: number,\n    targetRow: number[],\n    moveCardLists: number[]\n  ): boolean {\n    if (moveCardLists.length !== 1) return false;\n\n    switch (rowIndex) {\n      case 0: // spade (0-12)\n        if (moveCardLists[0] > 12) return false;\n        return moveCardLists[0] - targetRow.length === 0;\n      case 1: // heart (13-25)\n        if (moveCardLists[0] > 25 || moveCardLists[0] < 13) return false;\n        return moveCardLists[0] - targetRow.length === 13;\n      case 2: // diamond (26-38)\n        if (moveCardLists[0] > 38 || moveCardLists[0] < 26) return false;\n        return moveCardLists[0] - targetRow.length === 26;\n      case 3: // club (39-51)\n        if (moveCardLists[0] > 51 || moveCardLists[0] < 39) return false;\n        return moveCardLists[0] - targetRow.length === 39;\n      default:\n        return false;\n    }\n  }\n\n  private static isMoveToOtherRowValid(\n    targetRow: number[],\n    moveCardLists: number[]\n  ): boolean {\n    /**\n     * spade  <-> heart    diff 13 * 1 +- 1 = 12 || 14\n     * spade  <-> diamond  diff 13 * 2 +- 1 = 25 || 27\n     * club   <-> heart    diff 13 * 2 +- 1 = 25 || 27\n     * club   <-> diamond  diff 13 * 1 +- 1 = 12 || 14\n     */\n    if (!targetRow.length) return true;\n    let valueDiff: number = Math.abs(\n      targetRow[targetRow.length - 1] - moveCardLists[0]\n    );\n    return (\n      valueDiff === 12 ||\n      valueDiff === 14 ||\n      valueDiff === 25 ||\n      valueDiff === 27\n    );\n  }\n}\n","import Card from '../../../components/Card';\nimport GameDataInterface from '../../../interface/GameData';\nimport GameUtils from '../../../assets/utils/GameUtils';\n\nconst CardGroup: React.FC<{\n  row: number;\n  type: string;\n  cards: number[];\n  dropEvent: Function;\n}> = ({ row, type, cards, dropEvent }) => {\n  const onDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    cancelDefault(e);\n    const data = JSON.parse(e.dataTransfer.getData('data'));\n    const [moveCardFrom, moveCardPreRow, moveCardValue] = [\n      data.from,\n      data.row,\n      data.value\n    ];\n\n    dropEvent((prevData: GameDataInterface) => {\n      let copy: GameDataInterface = JSON.parse(JSON.stringify(prevData));\n      let datafrom: number[][] = GameUtils.GetListData(copy, moveCardFrom);\n      let dataTarget: number[][] = GameUtils.GetListData(copy, type);\n\n      let cardIndex: number = datafrom[moveCardPreRow].findIndex(\n        (value) => value === moveCardValue\n      );\n      let moveCardList: number[] = datafrom[moveCardPreRow].slice(cardIndex);\n\n      if (GameUtils.IsMoveValid(type, row, dataTarget[row], moveCardList)) {\n        datafrom[moveCardPreRow].splice(cardIndex);\n        dataTarget[row] = [...dataTarget[row], ...moveCardList];\n      }\n      return copy;\n    });\n  };\n  const cancelDefault = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  };\n\n  return (\n    <div\n      className=\"card-group\"\n      onDrop={onDrop}\n      onDragEnter={cancelDefault}\n      onDragOver={cancelDefault}\n    >\n      {cards.map((card: number) => {\n        return <Card key={card} from={type} row={row} value={card} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardGroup;\n","import React from 'react';\nimport CardGroup from './CardGroup';\n\nconst OpenCells: React.FC<{ cards: number[][]; dropEvent: Function }> = ({\n  cards,\n  dropEvent\n}) => {\n  return (\n    <div className=\"open-cells-wrapper\">\n      {cards.map((cardGroup: number[], index: number) => {\n        return (\n          <div key={`open-cell-row-${index}`} className=\"cell-wrapper\">\n            <CardGroup\n              type={'opencell'}\n              row={index}\n              cards={cardGroup}\n              dropEvent={dropEvent}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default OpenCells;\n","import React from 'react';\nimport CardGroup from './CardGroup';\n\nconst cardTypeList: string[] = ['spade', 'heart', 'diamond', 'club'];\n\nconst Foundation: React.FC<{ cards: number[][]; dropEvent: Function }> = ({\n  cards,\n  dropEvent\n}) => {\n  return (\n    <div className=\"foundation-wrapper\">\n      {cards.map((cardGroup: number[], index: number) => {\n        return (\n          <div\n            className={`cell-wrapper foundation-box-${cardTypeList[index]}`}\n            key={`Foundation-row-${index}`}\n          >\n            <CardGroup\n              type={'foundation'}\n              row={index}\n              cards={cardGroup}\n              dropEvent={dropEvent}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Foundation;\n","import { useState, useEffect } from 'react';\nimport HeaderBar from '../../components/HeaderBar';\nimport OpenCells from './components/OpenCells';\nimport Foundation from './components/Foundation';\nimport CardGroup from './components/CardGroup';\n\nimport GameUtils from '../../assets/utils/GameUtils';\nimport './main.css';\n\nimport GameDataInterface from '../../interface/GameData';\n\nconst Game: React.FC = () => {\n  const [gameData, setGameData] = useState<GameDataInterface>({\n    foundation: new Array(GameUtils.FOUNDATION_LENGTH).fill([]),\n    mainCardList: new Array(GameUtils.ROW_NUMBER).fill([]),\n    openCellList: new Array(GameUtils.OPEN_CELL_LENGTH).fill([])\n  });\n  const [initialGameData, setInitialGameData] = useState<GameDataInterface>({\n    foundation: new Array(GameUtils.FOUNDATION_LENGTH).fill([]),\n    mainCardList: new Array(GameUtils.ROW_NUMBER).fill([]),\n    openCellList: new Array(GameUtils.OPEN_CELL_LENGTH).fill([])\n  });\n  const [timer, setTimer] = useState<number>(0);\n  const [timerStatus, setTimerStatus] = useState<boolean>(true);\n\n  const toggleTimer: Function = () => {\n    setTimerStatus((prevData: boolean) => !prevData);\n  };\n\n  // initialize cardList\n  useEffect(() => {\n    const randomCardList: number[][] = GameUtils.GetRandomCardList();\n    let data = {\n      foundation: new Array(GameUtils.FOUNDATION_LENGTH).fill([]),\n      mainCardList: randomCardList,\n      openCellList: new Array(GameUtils.OPEN_CELL_LENGTH).fill([])\n    };\n    setGameData(data);\n    setInitialGameData(data);\n  }, []);\n\n  // timer\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (timerStatus) {\n      intervalId = setInterval(() => {\n        setTimer((timer: number) => timer + 1);\n      }, 1000);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [timerStatus]);\n\n  return (\n    <>\n      <HeaderBar\n        timer={timer}\n        toggleTimer={toggleTimer}\n        restart={() => setGameData(initialGameData)}\n      />\n      <div className=\"stacking-area\">\n        <OpenCells cards={gameData.openCellList} dropEvent={setGameData} />\n        <Foundation cards={gameData.foundation} dropEvent={setGameData} />\n      </div>\n      <div className=\"main\">\n        {gameData.mainCardList.map((cards: number[], row: number) => {\n          return (\n            <CardGroup\n              key={row}\n              type={'main'}\n              row={row}\n              cards={cards}\n              dropEvent={setGameData}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import Game from './pages/Game';\nimport './style.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}